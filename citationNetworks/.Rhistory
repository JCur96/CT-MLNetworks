#colors <- coalesce(colors, 3)
colors <- c("steelblue", "tomato")[colors]
dg <- decompose(modifiedNet2)
for (i in 1:length(dg)) {
plot(dg[[i]],
#vertex.label= c("CT", "ML"),
#vertex.color=c("blue", "gold"))
#vertex.label= )
vertex.color= colors)
}
plot(modifiedNet2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2, vertex.color = colors)
# plot(modifiedNet2, layout=layout, vertex.size=2,
#      vertex.label=NA, edge.arrow.size=.2)
# head(net2Df$to_degree)
# plot each connected subgraph separately
searchCol <- V(modifiedNet2)$search + 1
searchCol <- coalesce(searchCol, 3)
searchCol <- c("steelblue", "tomato", "white")[searchCol]
dg <- decompose(modifiedNet2)
for (i in 1:length(dg)) {
plot(dg[[i]],
#vertex.label= c("CT", "ML"),
#vertex.color=c("blue", "gold"))
#vertex.label= )
vertex.color= searchCol)
}
cbind(original = V(modifiedNet2)$search[1:10],
colors   = searchCol[1:10])
cbind(original = V(modifiedNet2)$search[1:10],
colors   = searchCol[1:10])
V(modifiedNet2)$search
# plot(fullData.statnet)
# fullData.igraph = intergraph::asIgraph(fullData.statnet)
# layout <- layout.fruchterman.reingold(fullData.igraph)
# plot(fullData.igraph, layout = layout)
# visIgraph(fullData.igraph)
#
# oc <- cluster_optimal()
# probably should have nodes as authors?
# and edges as titles?
# or is it authors as edges and titles as nodes?
edges <- fullData[c("ID", "title")]
nodes <- fullData[c("ID", "author")]
# nodes <- fullData[c("ID", "title")]
# edges <- fullData[c("ID", "author")]
net2 <- igraph::graph_from_data_frame(edges, directed = FALSE)
net2 <- set_vertex_attr(net2, "author", value = nodes)
#net2 <- set_vertex_attr(net2, "title", value = nodes)
#net2 <- set_vertex_attr(net2, "author", value = authors)
net2 <- set_vertex_attr(net2, "journal", value = journal)
net2 <- set_vertex_attr(net2, "year", value = year)
net2 <- set_vertex_attr(net2, "search", value = search)
net2 <- set_vertex_attr(net2, "references", value = references)
net2 <- set_vertex_attr(net2, "label", value = label)
net2 <- set_vertex_attr(net2, "color", value = color)
# large graph eg
layout <- layout.fruchterman.reingold(net2)
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2,
vertex.color=V(net2)$search)
V(net2)$degree <- igraph::degree(net2)
net2Df <- as_long_data_frame(net2)
colnames(net2Df)
filteredNet2Df <- subset(net2Df, net2Df$to_degree > 1)
modifiedNet2 <- graph_from_data_frame(filteredNet2Df, directed = FALSE)
V(modifiedNet2)$search
searchCol <- V(net2)$search + 1
searchCol <- coalesce(searchCol, 3)
searchCol <- c("steelblue", "tomato", "white")[searchCol]
net2Df <- as_long_data_frame(net2)
colnames(net2Df)
filteredNet2Df <- subset(net2Df, net2Df$to_degree > 1)
modifiedNet2 <- graph_from_data_frame(filteredNet2Df, directed = FALSE)
# cbind(original = V(modifiedNet2)$search[1:10],
#       colors   = searchCol[1:10])
dg <- decompose(modifiedNet2)
for (i in 1:length(dg)) {
plot(dg[[i]],
#vertex.label= c("CT", "ML"),
#vertex.color=c("blue", "gold"))
#vertex.label= )
vertex.color= searchCol)
}
cbind(original = V(net2)$search[1:10],
colors   = searchCol[1:10])
gc()
######### Imports #####################
library(bibliometrix)
library(igraph)
library(RColorBrewer)
#######################################
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T) # all data together with which search
# now make a network??
#igraph::graph_from_data_frame(fullData)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
# plot(fullData.statnet)
# fullData.igraph = intergraph::asIgraph(fullData.statnet)
# layout <- layout.fruchterman.reingold(fullData.igraph)
# plot(fullData.igraph, layout = layout)
# visIgraph(fullData.igraph)
#
# oc <- cluster_optimal()
# probably should have nodes as authors?
# and edges as titles?
# or is it authors as edges and titles as nodes?
edges <- fullData[c("ID", "title")]
nodes <- fullData[c("ID", "author")]
# nodes <- fullData[c("ID", "title")]
# edges <- fullData[c("ID", "author")]
net2 <- igraph::graph_from_data_frame(edges, directed = FALSE)
net2 <- set_vertex_attr(net2, "author", value = nodes)
#net2 <- set_vertex_attr(net2, "title", value = nodes)
#net2 <- set_vertex_attr(net2, "author", value = authors)
net2 <- set_vertex_attr(net2, "journal", value = journal)
net2 <- set_vertex_attr(net2, "year", value = year)
net2 <- set_vertex_attr(net2, "search", value = search)
net2 <- set_vertex_attr(net2, "references", value = references)
net2 <- set_vertex_attr(net2, "label", value = label)
net2 <- set_vertex_attr(net2, "color", value = color)
# large graph eg
layout <- layout.fruchterman.reingold(net2)
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2,
vertex.color=V(net2)$color)
authors <- fullData[c("ID", "author")]
journal <- fullData[c("ID", "source_title")]
year <- fullData[c("ID", "year")]
search <- fullData[c("ID", "search")]
label <- fullData[c("ID", "label")]
color <- fullData[c("ID", "color")]
edges <- fullData[c("ID", "title")]
nodes <- fullData[c("ID", "author")]
# nodes <- fullData[c("ID", "title")]
# edges <- fullData[c("ID", "author")]
net2 <- igraph::graph_from_data_frame(edges, directed = FALSE)
net2 <- set_vertex_attr(net2, "author", value = nodes)
#net2 <- set_vertex_attr(net2, "title", value = nodes)
#net2 <- set_vertex_attr(net2, "author", value = authors)
net2 <- set_vertex_attr(net2, "journal", value = journal)
net2 <- set_vertex_attr(net2, "year", value = year)
net2 <- set_vertex_attr(net2, "search", value = search)
net2 <- set_vertex_attr(net2, "references", value = references)
net2 <- set_vertex_attr(net2, "label", value = label)
net2 <- set_vertex_attr(net2, "color", value = color)
# large graph eg
layout <- layout.fruchterman.reingold(net2)
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2,
vertex.color=V(net2)$color)
warnings()
V(net2)$color
V(net2)$color <- ifelse(V(net)$search == 1, "gold", "blue")
V(net2)$color <- ifelse(V(net2)$search == 1, "gold", "blue")
#V(net2)$color <- ifelse(V(net2)$search == 1, "gold", "blue")
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
warnings()
#V(net2)$color <- ifelse(V(net2)$search == 1, "gold", "blue")
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
## refLists.R
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
head(fullData$references)
fullData$references[1,]
fullData$references[,1]
fullData$references[1,1]
fullData$references[1,]
head(fullData$references, 1)
head(fullData$references, 4)
grep("(?<![^,])XXX(?![^,])",fullData$references, value = FALSE, perl=TRUE)
refs <- fullData[c("ID", "references")]
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
refs <- fullData[c("ID", "references")]
grep("(?<![^,])XXX(?![^,])",refs$references, value = FALSE, perl=TRUE)
refs1 <- refs$references[,1]
refs1 <- refs$references[1,]
refs1 <- refs$references[5,]
refs1 <- refs$references[27,]
refs1 <- refs$references[27]
grep("(?<![^,])XXX(?![^,])",refs1, value = FALSE, perl=TRUE)
grep("(?<![^;]).(?![^;])",refs1, value = FALSE, perl=TRUE)
grep("^(.+?);", refs1, value = FALSE, perl=TRUE)
someRef <- grep("^(.+?);", refs1, value = FALSE, perl=TRUE)
someRef
someRef <- grep("^(.+?);", refs1, value = TRUE, perl=TRUE)
someRef
grep("^(.+?);", refs1, value = TRUE, perl=TRUE)
refs1.split(";")[0]
strsplit(refs1, ";")
strsplit("UK, USA, Germany", ",(?=[^,]+$)", perl=TRUE)
strsplit(refs1, ".,(?=[^,]+$)", perl=TRUE)
firstRef<- strsplit(refs1, ";")[1] ## this one works! need to do that in a loop and attach the ID to each
View(firstRef)
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef <- refList[1]
refList<- strsplit(refs1, ";")[1] ## this one works! need to do that in a loop and attach the ID to each
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef <- refList[1]
View(firstRef)
firstRef
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef <- refList[[1]]
firstRef
refList<- strsplit(refs1, ";") ## this one works! need to do that in a loop and attach the ID to each
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef <- refList[[1]]
firstRef
# also need to get the titles out??
#strsplit(refs1, ".,")
refList[1]
# also need to get the titles out??
#strsplit(refs1, ".,")
refList[[1]]
firstRef <- refList[[[1]]]
firstRef
ref <- '[52] " Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 113, pp. 297-309"'
strsplit(ref, ".,(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, ".,(?=[^,]+$)", perl=TRUE)
strsplit(split1, ".,(?=[^,]+$)", perl=TRUE)
split1
strsplit(split1, ".,(?=[^,]+$)", perl=TRUE)
class(split1)
newSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 11"
strsplit(newSplit, ".,(?=[^,]+$)", perl=TRUE)
thirdSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
strsplit(thirdSplit, ".,(?=[^,]+$)", perl=TRUE)
strsplit(thirdSplit, "(.,)(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(.,)(?=[^,]+$)", perl=TRUE)
split1
ref <- '[52] " Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 113, pp. 297-309"'
split1 <- strsplit(ref, "(.,)(?=[^,]+$)", perl=TRUE)
split1
ref <- '[52] " Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 113, pp. 297-309"'
split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(/.,)(?=[^,]+$)", perl=TRUE)
split1
split1 <- strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
split1
split1 <- strsplit(ref, "('.,')(?=[^,]+$)", perl=TRUE)
split1
split1 <- strsplit(ref, "(\'.,\')(?=[^,]+$)", perl=TRUE)
split1
split1 <- strsplit(ref, "('\.,')(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
split1
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(newSplit, "(.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
split1
strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(/\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "([:punct:],)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "\\.,(?=[^,]+$)", perl=TRUE)
strsplit(ref,"(\\.,)(?!.*\1)", perl=TRUE)
# split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
# split1
# class(split1)
# newSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 11"
# strsplit(newSplit, "(.,)(?=[^,]+$)", perl=TRUE)
# thirdSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
# strsplit(thirdSplit, "(.,)(?=[^,]+$)", perl=TRUE)
# ok might have to split at every occurence of ;
# put all of those into their own cols? IDK this is looking less and less possible
# next match the (DATENUMERIC) and pull everything before that ?
newstr <- " Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
strsplit(newstr, "(\\([0-9]*\\))(?!.*\1)", perl=TRUE)
######## Imports #####################
library(bibliometrix)
library(igraph)
library(RColorBrewer)
#######################################
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
######## Imports #####################
library(bibliometrix)
library(igraph)
library(RColorBrewer)
#######################################
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
######## Imports #####################
library(bibliometrix)
library(igraph)
library(RColorBrewer)
#######################################
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
#######################################
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T) # all data together with which search
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
fullData$search <- as.numeric(fullData$search)
nodes <- fullData[c("ID", "title")] # slice of just ID and title
edges <- fullData[c("ID", "references")] # could be that I want cited_by here
edges <- as.data.frame(table(edges))
edges <- subset(edges, Freq > 0)
# currently this is an undirected shared reference network I think
# or at least it should be as those are the edges
#edges <- fullData[c("ID", "cited_by")]
authors <- fullData[c("ID", "author")]
########### second attempt ###################
## This one works!
## So references are probably too clunky
## But using the 'cited_by' field works
##
nodes <- fullData[c("ID", "title")] # slice of just ID and title
edges <- fullData[c("ID", "cited_by")]
#edges <- as.data.frame(table(edges))
#edges <- subset(edges, Freq > 0)
net1 <- igraph::graph_from_data_frame(edges)
net1 <- set_vertex_attr(net1, "title", value = nodes)
# plot(net)
net1 <- set_vertex_attr(net1, "author", value = authors)
net1 <- set_vertex_attr(net1, "journal", value = journal)
net1 <- set_vertex_attr(net1, "year", value = year)
net1 <- set_vertex_attr(net1, "search", value = search)
net1 <- set_vertex_attr(net1, "references", value = references)
V(net1)$color <- ifelse(V(net1)$search == 1, "gold", "blue")
# large graph eg
layout <- layout.fruchterman.reingold(net1)
#pal <- brewer.pal(length(unique(V(net1)$search)), "Set3")
#colors = c("Red", "Blue")
plot(net1, layout=layout, vertex.size=2,
vertex.label=NA,
#vertex.color=pal[as.numeric(as.factor(vertex_attr(net1, "search")))],
#vertex.color= colors[as.numeric(as.factor(vertex_attr(net1, "search")))],
vertex.color= fullData$search,
edge.arrow.size=.2)
# plot(fullData.statnet)
# fullData.igraph = intergraph::asIgraph(fullData.statnet)
# layout <- layout.fruchterman.reingold(fullData.igraph)
# plot(fullData.igraph, layout = layout)
# visIgraph(fullData.igraph)
#
# oc <- cluster_optimal()
# probably should have nodes as authors?
# and edges as titles?
# or is it authors as edges and titles as nodes?
edges <- fullData[c("ID", "title")]
nodes <- fullData[c("ID", "author")]
# nodes <- fullData[c("ID", "title")]
# edges <- fullData[c("ID", "author")]
net2 <- igraph::graph_from_data_frame(edges, directed = FALSE)
net2 <- set_vertex_attr(net2, "author", value = nodes)
#net2 <- set_vertex_attr(net2, "title", value = nodes)
#net2 <- set_vertex_attr(net2, "author", value = authors)
net2 <- set_vertex_attr(net2, "journal", value = journal)
net2 <- set_vertex_attr(net2, "year", value = year)
net2 <- set_vertex_attr(net2, "search", value = search)
net2 <- set_vertex_attr(net2, "references", value = references)
net2 <- set_vertex_attr(net2, "label", value = label)
net2 <- set_vertex_attr(net2, "searchCol", value = color)
source("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code/refLists.R", encoding = 'UTF-8')
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
head(fullData$references, 4)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
refs <- fullData[c("ID", "references")]
refs1 <- refs$references[27]
grep("(?<![^;]).(?![^;])",refs1, value = FALSE, perl=TRUE)
someRef <- grep("^(.+?);", refs1, value = TRUE, perl=TRUE)
someRef
grep("^(.+?);", refs1, value = TRUE, perl=TRUE)
refList<- strsplit(refs1, ";") ## this one works! need to do that in a loop and attach the ID to each
# also need to get the titles out??
#strsplit(refs1, ".,")
refList[[1]]
firstRef <- refList[[1]]
firstRef
strsplit("UK, USA, Germany", ",(?=[^,]+$)", perl=TRUE)
ref <- '[52] " Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 113, pp. 297-309"'
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref,"(\\.,)(?!.*\1)", perl=TRUE) # ok this splits it up quite well?
# split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
# split1
# class(split1)
# newSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 11"
# strsplit(newSplit, "(.,)(?=[^,]+$)", perl=TRUE)
# thirdSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
# strsplit(thirdSplit, "(.,)(?=[^,]+$)", perl=TRUE)
# ok might have to split at every occurence of ;
# put all of those into their own cols? IDK this is looking less and less possible
# next match the (DATENUMERIC) and pull everything before that ?
newstr <- " Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
strsplit(newstr, "(\\([0-9]*\\))(?!.*\1)", perl=TRUE) # ok great, can get the titles and with some manual work the everything else
# monday task to automate grabbing the titles and having them associated with original article ID
# monday task to automate grabbing the titles and having them associated with original article ID
# I guess also give them their own unique ID? Like maybe paperID_OwnID
## refLists.R
set.seed(1)
#setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
setwd("E:/GitRepos/CT-MLNetworks/citationNetworks/Code")
setwd("E:/GitRepos/CT-MLNetworks/citationNetworks/Code")
install.packages("synthesisr")
install.packages("synthesisr")
r --version
--version
-version
version
############## Actual work from here on ##############
set.seed(1)
IDLinkedRefDf <-  read.csv("../Data/SplitRefs.csv")
unique(IDLinkedRefDf$ref_title)
numTitles <- length(unique(IDLinkedRefDf$ref_title))
numTitles
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
head(fullData$references, 4)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
titleData <- fullData[,c("ID", "title")]
View(titleData)
matchedTable <- litsearchr::check_recall(titleData$title, unique(IDLinkedRefDf$ref_title))
install.packages('litsearchr')
install.packages("remotes")
library(remotes)
install_github("elizagrames/litsearchr", ref="main")
install_github("elizagrames/litsearchr", ref="main")
library(litsearchr)
matchedTable <- litsearchr::check_recall(titleData$title, unique(IDLinkedRefDf$ref_title))
matchedTableDf <- as.data.frame(matchedTable)
write.csv(matchedTableDf, "../Data/matchedTableDf.csv")
