for (i in 1:10) {
tmpList <- c()
graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE)
graphCluster <- cluster_louvain(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
graphModularityList <- as.vector(graphModularity)
append(modularityList[[i]], graphModularityList)
# print(class(graphModularity))
# modularityList.append(graphModularity)
#append(modularityList, tmpList)
#modularityList[[i]]
#append(modularityList[[i]], graphModularity)
}
for (i in 1:10) {
graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE)
graphCluster <- cluster_louvain(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
# graphModularityList <- as.vector(graphModularity)
modularityList <- append(modularityList, graphModularity)
# print(class(graphModularity))
# modularityList.append(graphModularity)
#append(modularityList, tmpList)
#modularityList[[i]]
#append(modularityList[[i]], graphModularity)
}
modularityList <- c()
for (i in 1:1000) {
graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE)
graphCluster <- cluster_louvain(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
modularityList <- append(modularityList, graphModularity)
}
hist(modularityList)
modularityList <- c()
for (i in 1:10000) {
graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE)
graphCluster <- cluster_louvain(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
modularityList <- append(modularityList, graphModularity)
}
hist(modularityList)
members
write.csv(members, "../Data/membership.csv")
membersDf <- as.data.frame(members)
class(members)
write.csv(as.numeric(members), "../Data/membership.csv")
?rbind
members <- read.csv("../Data/membership.csv")
members
communities <- read.csv("../Data/membership.csv")
communities
names(communities)[names(communities) == "X"] <- "ID"
names(communities)[names(communities) == "x"] <- "Community"
fullData <- merge(fullData, communities, all = T, by = 'ID')
View(fullData)
# now can see what search each module contains
groupedData <- fullData %>% group_by(Community)
# now can see what search each module contains
groupedData <- fullData %>% dplyr::group_by(Community)
View(groupedData)
# now can see what search each module contains
groupedData <- fullData %>% dplyr::group_split(Community)
View(groupedData)
groupedData[[1]]
# now can see what search each module contains
# ok maybe drop irrelevant stuff
partData <- fullData[c("ID", "Community")]
groupedData <- partData %>% dplyr::group_split(Community)
groupedData[[1]]
groupedData[[7]]
# now can see what search each module contains
# ok maybe drop irrelevant stuff
partData <- fullData[c("ID", "search", "Community")]
groupedData <- partData %>% dplyr::group_split(Community)
groupedData[[7]]
# great, now code for proportion of each comm of each search?
summary(groupedData[[7]])
prop.table(groupedData[[7]])
tab = margin.table(groupedData[[7]], margin=c(2,2))
tab <- groupedData[[7]]
tab = margin.table(tab, margin=c(2,2))
tab
tab <- as.array(tab)
prop.table(tab)
# tab = margin.table(tab, margin=c(2,2))
prop.table(tab, 2)
tab <- groupedData[[7]]
# tab <- as.array(tab)
# tab = margin.table(tab, margin=c(2,2))
prop.table(tab, 2)
tab <- as.array(tab)
tab <- as.data.frame(tab)
# tab = margin.table(tab, margin=c(2,2))
prop.table(tab, 2)
tab <- as.array(tab)
tab <- as.data.frame(tab)
class(tab)
tab
tab <- groupedData[[7]]
class(tab)
tab
# tab <- as.array(tab)
# tab = margin.table(tab, margin=c(2,2))
prop.table(as.data.frame(tab, 2))
?dplyr::summarise
tab %>% dplyr::summarize(count=n())
tab %>% dplyr::summarize(count=search)
tab %>% dplyr::summarize()
tab %>% dplyr::summarize(search)
count(tab, search)
dplyr::count(tab, search)
tab <- groupedData[[7]]
# class(tab)
# tab
# tab <- as.data.frame(tab)
# tab
# # tab <- as.array(tab)
# # tab = margin.table(tab, margin=c(2,2))
# prop.table(as.data.frame(tab, 2))
#
# tab %>% dplyr::summarize(search)
dplyr::count(tab, search)
length(tab)
size(tab)
shape(tab)
nrows(tab)
nrow(tab)
# class(tab)
# tab
# tab <- as.data.frame(tab)
# tab
# # tab <- as.array(tab)
# # tab = margin.table(tab, margin=c(2,2))
# prop.table(as.data.frame(tab, 2))
#
# tab %>% dplyr::summarize(search)
counts <- dplyr::count(tab, search)
# count return col2 value 1 the col 2 value 2 over nrow for proportion
counts[1]
# count return col2 value 1 the col 2 value 2 over nrow for proportion
counts[,1]
# count return col2 value 1 the col 2 value 2 over nrow for proportion
counts[1,]
# count return col2 value 1 the col 2 value 2 over nrow for proportion
counts[1,2]
# count return col2 value 1 the col 2 value 2 over nrow for proportion
counts[1,2] / nrow(totRows)
totRows <- nrow(tab)
# count return col2 value 1 the col 2 value 2 over nrow for proportion
counts[1,2] / nrow(totRows)
# count return col2 value 1 the col 2 value 2 over nrow for proportion
counts[1,2] / totRows
counts[2,2]
counts[2,2] / totRows
counts
# count return col2 value 1 the col 2 value 2 over nrow for proportion
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
CTProp + MLProp
nrow(groupedData)
length(groupedData)
proportionList <- c()
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
# CTProp + MLProp
proportionList <- append(proportionList, CTProp)
}
CTProportionList <- c()
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
# CTProp + MLProp
CTProportionList <- append(CTProportionList, CTProp)
}
MLProportionList <-
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
# CTProp + MLProp
MLProportionList <- append(MLProportionList, MLProp)
}
MLProportionList <- c()
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
# CTProp + MLProp
MLProportionList <- append(MLProportionList, MLProp)
}
MLPropList
MLProportionList
MLProportionList <- c()
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
if (is.na(MLProp)) {
MLProp <- 0
}
# CTProp + MLProp
MLProportionList <- append(MLProportionList, MLProp)
}
MLProportionList
partData <- merge(partData, MLProportionList, by='Community')
MLProportionList <- as.data.frame(MLProportionList)
MLProportionList
View(MLProportionList)
MLProportionList
MLProportionList <- as_long_data_frame(MLProportionList)
MLProportionList <- as.data.frame(MLProportionList)
View(MLProportionList)
MLProportionList <- c()
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
if (is.na(MLProp)) {
MLProp <- 0
}
# CTProp + MLProp
MLProportionList <- append(MLProportionList, MLProp)
}
MLProportionList
MLPropDf <- c()
for (i in 1:length(MLProportionList)) {
comm <- MLProportionList[i]
value <- MLProportionList[i][[1]]
row <- c(comm, value)
MLPropDf <- append(MLPropDf, row)
}
View(MLPropDf)
MLPropDf <- c()
for (i in 1:length(MLProportionList)) {
comm <- MLProportionList[[i]]
value <- MLProportionList[[i]][[1]]
row <- c(comm, value)
MLPropDf <- append(MLPropDf, row)
}
MLPropDf <- as.data.frame(MLPropDf)
View(MLPropDf)
MLPropDf <- c()
for (i in 1:length(MLProportionList)) {
comm <- i
#comm <- MLProportionList[[i]]
value <- MLProportionList[[i]][[1]]
row <- c(comm, value)
MLPropDf <- append(MLPropDf, row)
}
MLPropDf <- as.data.frame(MLPropDf)
View(MLPropDf)
MLProportionList
#         #comm <- MLProportionList[[i]]
#         value <- MLProportionList[[i]][[1]]
#         row <- c(comm, value)
#         MLPropDf <- append(MLPropDf, row)
# }
# MLPropDf <- as.data.frame(MLPropDf)
# MLProportionList <- as.data.frame(MLProportionList)
# MLProportionList <- MLProportionList %>% gather(year, value, -c(Code, Country))
# MLProportionList
# partData <- merge(partData, MLProportionList, by='Community')
MLPropDf <- as.data.frame(MLPropDf)
MLPropDf
#         value <- MLProportionList[[i]][[1]]
#         row <- c(comm, value)
#         MLPropDf <- append(MLPropDf, row)
# }
# MLPropDf <- as.data.frame(MLPropDf)
# MLProportionList <- as.data.frame(MLProportionList)
# MLProportionList <- MLProportionList %>% gather(year, value, -c(Code, Country))
# MLProportionList
# partData <- merge(partData, MLProportionList, by='Community')
# MLPropDf <- as.data.frame(MLPropDf) # ?????????
MLPropDf <- unlist(MLProportionList)
MLPropDf
#         value <- MLProportionList[[i]][[1]]
#         row <- c(comm, value)
#         MLPropDf <- append(MLPropDf, row)
# }
# MLPropDf <- as.data.frame(MLPropDf)
# MLProportionList <- as.data.frame(MLProportionList)
# MLProportionList <- MLProportionList %>% gather(year, value, -c(Code, Country))
# MLProportionList
# partData <- merge(partData, MLProportionList, by='Community')
# MLPropDf <- as.data.frame(MLPropDf) # ?????????
MLPropDf <- as.data.frame(unlist(MLProportionList))
MLPropDf
CTPropDf <- as.data.frame(unlist(CTProportionList))
View(CTPropDf)
colnames(MLPropDf)
names(CTPropDf)[names(CTPropDf) == "unlist(CTProportionList)"] <- "proportionCT"
CTPropDf$Community <- 1:nrow(CTPropDf)
CTPropDf
partData <- merge(partData, MLPropDf, by='Community')
partData <- merge(partData, MLPropDf, all=T, by='Community')
MLPropDf$Community
MLPropDf$Community <- 1:nrow(MLPropDf)
MLPropDf$Community
partData <- merge(partData, MLPropDf, all=T, by='Community')
partData <- merge(partData, CTPropDf, all=T, by='Community')
View(partData)
# networkAnalysis.R
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
# read in edgeList data
edges <- read.csv("../Data/edges/edgeList.csv")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 2
CTData$search <- 1
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
fullData$search <- as.numeric(fullData$search)
colnames(edges)
edges <- edges[c("CitingID", "CitedID")]
colnames(edges)
nodes <- fullData[c("ID")] # slice of just ID and title
# currently this is an undirected shared reference network I think
# or at least it should be as those are the edges
#edges <- fullData[c("ID", "cited_by")]
titles <- fullData[c("ID", "title")]
authors <- fullData[c("ID", "author")]
journal <- fullData[c("ID", "source_title")]
year <- fullData[c("ID", "year")]
search <- fullData[c("ID", "search")]
label <- fullData[c("ID", "label")]
color <- fullData[c("ID", "color")]
references <- fullData[c("ID", "references")]
class(edges)
edges <- as.matrix(edges)
class(edges)
edges
net <- igraph::graph_from_edgelist(edges, directed = FALSE)
net <- set_vertex_attr(net, "title", value = nodes)
net <- set_vertex_attr(net, "author", value = authors)
net <- set_vertex_attr(net, "journal", value = journal)
net <- set_vertex_attr(net, "year", value = year)
net <- set_vertex_attr(net, "search", value = search)
layout <- layout.fruchterman.reingold(net)
plot(simplify(net),
layout=layout, vertex.size=2,
vertex.label=NA,
vertex.color= fullData$search,
edge.arrow.size=.2)
plot(delete.vertices(simplify(net), degree(net)==0), vertex.size=2,
vertex.label=NA,
vertex.color= fullData$search,
edge.arrow.size=.2)
coords = layout_(net, with_mds())
plot1 <- plot(delete.vertices(simplify(net), degree(net)==0), vertex.size=2,
vertex.label=NA,
vertex.color= fullData$search,
edge.arrow.size=.2, layout = coords)
plot2 <- plot(delete.vertices(simplify(net), degree(net)==0), vertex.size=2,
vertex.label=NA,
vertex.color= fullData$color,
edge.arrow.size=.2, layout = coords)
comStructure <- modularity(net, fullData$search)
comStructure
cluster <- cluster_louvain(net)
cluster
# modularity(cluster)
# modularity(net, membership(cluster))
members <- igraph::membership(cluster)
members
modularity(net, members)
class(members)
membersDf <- as.data.frame(members)
write.csv(as.numeric(members), "../Data/membership.csv")
# bind the dfs
communities <- read.csv("../Data/membership.csv")
communities
names(communities)[names(communities) == "X"] <- "ID"
names(communities)[names(communities) == "x"] <- "Community"
fullData <- merge(fullData, communities, all = T, by = 'ID')
# now can see what search each module contains
# ok maybe drop irrelevant stuff
partData <- fullData[c("ID", "search", "Community")]
groupedData <- partData %>% dplyr::group_split(Community)
groupedData[[7]]
# great, now code for proportion of each comm of each search?
tab <- groupedData[[7]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
counts
# count return col2 value 1 the col 2 value 2 over nrow for proportion
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
CTProp + MLProp
CTProportionList <- c()
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
# CTProp + MLProp
CTProportionList <- append(CTProportionList, CTProp)
}
CTPropDf <- as.data.frame(unlist(CTProportionList))
names(CTPropDf)[names(CTPropDf) == "unlist(CTProportionList)"] <- "proportionCT"
CTPropDf$Community <- 1:nrow(CTPropDf)
CTPropDf
partData <- merge(partData, CTPropDf, all=T, by='Community')
MLProportionList <- c()
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
if (is.na(MLProp)) {
MLProp <- 0
}
# CTProp + MLProp
MLProportionList <- append(MLProportionList, MLProp)
}
MLProportionList
#         value <- MLProportionList[[i]][[1]]
#         row <- c(comm, value)
#         MLPropDf <- append(MLPropDf, row)
# }
# MLPropDf <- as.data.frame(MLPropDf)
# MLProportionList <- as.data.frame(MLProportionList)
# MLProportionList <- MLProportionList %>% gather(year, value, -c(Code, Country))
# MLProportionList
# partData <- merge(partData, MLProportionList, by='Community')
# MLPropDf <- as.data.frame(MLPropDf) # ?????????
MLPropDf <- as.data.frame(unlist(MLProportionList))
MLPropDf
colnames(MLPropDf)
names(MLPropDf)[names(MLPropDf) == "unlist(MLProportionList)"] <- "proportionML"
MLPropDf$Community <- 1:nrow(MLPropDf)
MLPropDf$Community
partData <- merge(partData, MLPropDf, all=T, by='Community')
# is modularity different to random?
erdos.renyi.game(
6372, # number of verticies
m = 37584, # number of edges (m)
type = "gnm", # gnm as using 'm' for edges
directed = FALSE,
loops = FALSE
)
graph <- sample_gnm(
6372,
37584,
directed = FALSE,
loops = FALSE
)
graphCluster <- cluster_louvain(graph)
graphMembers <- igraph::membership(graphCluster)
modularity(graph, graphMembers)
graph
modularityList <- c()
for (i in 1:10000) {
graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE)
graphCluster <- cluster_louvain(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
modularityList <- append(modularityList, graphModularity)
}
modularityList
hist(modularityList)
# proportion of CT citing ML papers
# how are we going to get proportion of ML refs cited out?
names(fullData)[names(fullData) == "ID"] <- "CitingID"
# need to make a list of each cited ID by citingID
edgeDf <- as.data.frame(edges)
edgeDf <- edgeDf[order(edgeDf$CitingID),]
citationListsByNode <- edgeDf %>%
dplyr::group_by(CitingID) %>%
dplyr::summarise(CitedID = list(CitedID))
class(citationListsByNode)
##
dataPlusEdges <- merge(fullData, citationListsByNode, all = T, by = 'CitingID')
MLFull <- dataPlusEdges %>% dplyr::filter(dataPlusEdges$label == 'ML')
CTFull <- dataPlusEdges %>% dplyr::filter(dataPlusEdges$label == 'CT')
# plot proportion CT citing ML against year
# plot proportion CT citing ML against year
# gephi plot
# plot proportion CT citing ML against year
# gephi plot
