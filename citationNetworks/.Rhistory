<<<<<<< HEAD
for (i in 1:nrow(df)) {
articleTitle <- df$Title[i]
refTitle <- df$ref_title[i]
CitingID <- df$ID[i]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(match)
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- NA
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
return(outputDf)
}
partData <- IDLinkedRefDf[85:90,]
matchedDf <- matchTitles(partData, matchedDf)
# no idea why it doesnt like this one? # matchTable <- data.frame(Citing_ID=as.numeric(), Cited_ID=as.numeric(), Citing_Title=as.character(), Cited_Title=as.character(), BestMatch=as.character, Similarity=as.numeric())# not sure if that will work
matchedDf <- data.frame(CitingID=as.numeric(), CitedID=as.numeric(), CitingTitle=as.character(), CitedTitle=as.character(), BestMatch=as.character(), Similarity=as.numeric())
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
#print(match)
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- NA
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
return(outputDf)
}
partData <- IDLinkedRefDf[85:90,]
matchedDf <- matchTitles(partData, fullData, matchedDf)
# no idea why it doesnt like this one? # matchTable <- data.frame(Citing_ID=as.numeric(), Cited_ID=as.numeric(), Citing_Title=as.character(), Cited_Title=as.character(), BestMatch=as.character, Similarity=as.numeric())# not sure if that will work
matchedDf <- data.frame(CitingID=as.numeric(), CitedID=as.numeric(), CitingTitle=as.character(), CitedTitle=as.character(), BestMatch=as.character(), Similarity=as.numeric())
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
#print(match)
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
return(outputDf)
}
partData <- IDLinkedRefDf[1:1000,]
matchedDf <- matchTitles(partData, fullData, matchedDf)
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
#print(match)
if (match =< 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
return(outputDf)
}
partData <- IDLinkedRefDf[1:1000,]
matchedDf <- matchTitles(partData, fullData, matchedDf)
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(class(match))
if (match =< 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
return(outputDf)
}
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(class(match))
if (match =< 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
return(outputDf)
}
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(class(match))
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
return(outputDf)
}
partData <- IDLinkedRefDf[1:1000,]
matchedDf <- matchTitles(partData, fullData, matchedDf)
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(match)
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
return(outputDf)
}
matchedDf <- matchTitles(partData, fullData, matchedDf)
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(match)
if (!is.na(match)) {
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
}
return(outputDf)
}
matchedDf <- matchTitles(partData, fullData, matchedDf)
match <- 1-unlist(lapply(match, min, na.rm=TRUE))
if (!is.na(match)) {
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(match)
match <- 1-unlist(lapply(match, min, na.rm=TRUE))
if (!is.na(match)) {
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(match)
match <- 1-unlist(lapply(match, min, na.rm=TRUE))
if (!is.na(match)) {
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
}
return(outputDf)
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(match)
match <- 1-unlist(lapply(match, min, na.rm=TRUE))
if (!is.na(match)) {
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
}
return(outputDf)
}
# no idea why it doesnt like this one? # matchTable <- data.frame(Citing_ID=as.numeric(), Cited_ID=as.numeric(), Citing_Title=as.character(), Cited_Title=as.character(), BestMatch=as.character, Similarity=as.numeric())# not sure if that will work
matchedDf <- data.frame(CitingID=as.numeric(), CitedID=as.numeric(), CitingTitle=as.character(), CitedTitle=as.character(), BestMatch=as.character(), Similarity=as.numeric())
matchTitles <- function(refDf, fullDataDf, outputDf) {
for (i in 1:nrow(fullDataDf)) {
articleTitle <- fullDataDf$title[i]
for (j in 1:nrow(refDf)) {
refTitle <- refDf$ref_title[j]
CitingID <- refDf$ID[j]
match <- synthesisr::fuzzdist(a=tm::removePunctuation(tolower(articleTitle)), b=tm::removePunctuation(tolower(refTitle)))
bestMatch <- refTitle[unlist(lapply(match, which.min))] # don't think this is working
print(match)
match <- 1-unlist(lapply(match, min, na.rm=TRUE))
if (!is.na(match)) {
if (match <= 0.5) { # should actually be match <= 0.5
#bestMatch <- refTitle[unlist(lapply(match, which.min))]
#matchTable <- rbind(matchTable, match)
#print(class(match))
#print(bestMatch)
# x <- 1-unlist(lapply(match, min, na.rm=TRUE))
#x <- 1-unlist(lapply(match, max, na.rm=TRUE))
#print(x)
#print(match)
#print(class(bestMatch))
CitedID <- fullDataDf$ID
# itemList <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
itemRow <- data.frame(CitingID, CitedID, articleTitle, refTitle, bestMatch, match)
# itemRow <- as.data.frame(itemList)
colnames(itemRow) <- c("CitingID", "CitedID", "CitingTitle", "CitedTitle", "BestMatch", "Similarity")
#print(colnames(itemRow))
outputDf <- rbind(outputDf, itemRow)
#print(outputDf[i])
}
}
}
}
return(outputDf)
}
############## Actual work from here on ##############
=======
#colors <- coalesce(colors, 3)
colors <- c("steelblue", "tomato")[colors]
dg <- decompose(modifiedNet2)
for (i in 1:length(dg)) {
plot(dg[[i]],
#vertex.label= c("CT", "ML"),
#vertex.color=c("blue", "gold"))
#vertex.label= )
vertex.color= colors)
}
plot(modifiedNet2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2, vertex.color = colors)
# plot(modifiedNet2, layout=layout, vertex.size=2,
#      vertex.label=NA, edge.arrow.size=.2)
# head(net2Df$to_degree)
# plot each connected subgraph separately
searchCol <- V(modifiedNet2)$search + 1
searchCol <- coalesce(searchCol, 3)
searchCol <- c("steelblue", "tomato", "white")[searchCol]
dg <- decompose(modifiedNet2)
for (i in 1:length(dg)) {
plot(dg[[i]],
#vertex.label= c("CT", "ML"),
#vertex.color=c("blue", "gold"))
#vertex.label= )
vertex.color= searchCol)
}
cbind(original = V(modifiedNet2)$search[1:10],
colors   = searchCol[1:10])
cbind(original = V(modifiedNet2)$search[1:10],
colors   = searchCol[1:10])
V(modifiedNet2)$search
# plot(fullData.statnet)
# fullData.igraph = intergraph::asIgraph(fullData.statnet)
# layout <- layout.fruchterman.reingold(fullData.igraph)
# plot(fullData.igraph, layout = layout)
# visIgraph(fullData.igraph)
#
# oc <- cluster_optimal()
# probably should have nodes as authors?
# and edges as titles?
# or is it authors as edges and titles as nodes?
edges <- fullData[c("ID", "title")]
nodes <- fullData[c("ID", "author")]
# nodes <- fullData[c("ID", "title")]
# edges <- fullData[c("ID", "author")]
net2 <- igraph::graph_from_data_frame(edges, directed = FALSE)
net2 <- set_vertex_attr(net2, "author", value = nodes)
#net2 <- set_vertex_attr(net2, "title", value = nodes)
#net2 <- set_vertex_attr(net2, "author", value = authors)
net2 <- set_vertex_attr(net2, "journal", value = journal)
net2 <- set_vertex_attr(net2, "year", value = year)
net2 <- set_vertex_attr(net2, "search", value = search)
net2 <- set_vertex_attr(net2, "references", value = references)
net2 <- set_vertex_attr(net2, "label", value = label)
net2 <- set_vertex_attr(net2, "color", value = color)
# large graph eg
layout <- layout.fruchterman.reingold(net2)
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2,
vertex.color=V(net2)$search)
V(net2)$degree <- igraph::degree(net2)
net2Df <- as_long_data_frame(net2)
colnames(net2Df)
filteredNet2Df <- subset(net2Df, net2Df$to_degree > 1)
modifiedNet2 <- graph_from_data_frame(filteredNet2Df, directed = FALSE)
V(modifiedNet2)$search
searchCol <- V(net2)$search + 1
searchCol <- coalesce(searchCol, 3)
searchCol <- c("steelblue", "tomato", "white")[searchCol]
net2Df <- as_long_data_frame(net2)
colnames(net2Df)
filteredNet2Df <- subset(net2Df, net2Df$to_degree > 1)
modifiedNet2 <- graph_from_data_frame(filteredNet2Df, directed = FALSE)
# cbind(original = V(modifiedNet2)$search[1:10],
#       colors   = searchCol[1:10])
dg <- decompose(modifiedNet2)
for (i in 1:length(dg)) {
plot(dg[[i]],
#vertex.label= c("CT", "ML"),
#vertex.color=c("blue", "gold"))
#vertex.label= )
vertex.color= searchCol)
}
cbind(original = V(net2)$search[1:10],
colors   = searchCol[1:10])
gc()
######### Imports #####################
library(bibliometrix)
library(igraph)
library(RColorBrewer)
#######################################
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T) # all data together with which search
# now make a network??
#igraph::graph_from_data_frame(fullData)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
# plot(fullData.statnet)
# fullData.igraph = intergraph::asIgraph(fullData.statnet)
# layout <- layout.fruchterman.reingold(fullData.igraph)
# plot(fullData.igraph, layout = layout)
# visIgraph(fullData.igraph)
#
# oc <- cluster_optimal()
# probably should have nodes as authors?
# and edges as titles?
# or is it authors as edges and titles as nodes?
edges <- fullData[c("ID", "title")]
nodes <- fullData[c("ID", "author")]
# nodes <- fullData[c("ID", "title")]
# edges <- fullData[c("ID", "author")]
net2 <- igraph::graph_from_data_frame(edges, directed = FALSE)
net2 <- set_vertex_attr(net2, "author", value = nodes)
#net2 <- set_vertex_attr(net2, "title", value = nodes)
#net2 <- set_vertex_attr(net2, "author", value = authors)
net2 <- set_vertex_attr(net2, "journal", value = journal)
net2 <- set_vertex_attr(net2, "year", value = year)
net2 <- set_vertex_attr(net2, "search", value = search)
net2 <- set_vertex_attr(net2, "references", value = references)
net2 <- set_vertex_attr(net2, "label", value = label)
net2 <- set_vertex_attr(net2, "color", value = color)
# large graph eg
layout <- layout.fruchterman.reingold(net2)
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2,
vertex.color=V(net2)$color)
authors <- fullData[c("ID", "author")]
journal <- fullData[c("ID", "source_title")]
year <- fullData[c("ID", "year")]
search <- fullData[c("ID", "search")]
label <- fullData[c("ID", "label")]
color <- fullData[c("ID", "color")]
edges <- fullData[c("ID", "title")]
nodes <- fullData[c("ID", "author")]
# nodes <- fullData[c("ID", "title")]
# edges <- fullData[c("ID", "author")]
net2 <- igraph::graph_from_data_frame(edges, directed = FALSE)
net2 <- set_vertex_attr(net2, "author", value = nodes)
#net2 <- set_vertex_attr(net2, "title", value = nodes)
#net2 <- set_vertex_attr(net2, "author", value = authors)
net2 <- set_vertex_attr(net2, "journal", value = journal)
net2 <- set_vertex_attr(net2, "year", value = year)
net2 <- set_vertex_attr(net2, "search", value = search)
net2 <- set_vertex_attr(net2, "references", value = references)
net2 <- set_vertex_attr(net2, "label", value = label)
net2 <- set_vertex_attr(net2, "color", value = color)
# large graph eg
layout <- layout.fruchterman.reingold(net2)
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2,
vertex.color=V(net2)$color)
warnings()
V(net2)$color
V(net2)$color <- ifelse(V(net)$search == 1, "gold", "blue")
V(net2)$color <- ifelse(V(net2)$search == 1, "gold", "blue")
#V(net2)$color <- ifelse(V(net2)$search == 1, "gold", "blue")
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
warnings()
#V(net2)$color <- ifelse(V(net2)$search == 1, "gold", "blue")
plot(net2, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
## refLists.R
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
head(fullData$references)
fullData$references[1,]
fullData$references[,1]
fullData$references[1,1]
fullData$references[1,]
head(fullData$references, 1)
head(fullData$references, 4)
grep("(?<![^,])XXX(?![^,])",fullData$references, value = FALSE, perl=TRUE)
refs <- fullData[c("ID", "references")]
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
refs <- fullData[c("ID", "references")]
grep("(?<![^,])XXX(?![^,])",refs$references, value = FALSE, perl=TRUE)
refs1 <- refs$references[,1]
refs1 <- refs$references[1,]
refs1 <- refs$references[5,]
refs1 <- refs$references[27,]
refs1 <- refs$references[27]
grep("(?<![^,])XXX(?![^,])",refs1, value = FALSE, perl=TRUE)
grep("(?<![^;]).(?![^;])",refs1, value = FALSE, perl=TRUE)
grep("^(.+?);", refs1, value = FALSE, perl=TRUE)
someRef <- grep("^(.+?);", refs1, value = FALSE, perl=TRUE)
someRef
someRef <- grep("^(.+?);", refs1, value = TRUE, perl=TRUE)
someRef
grep("^(.+?);", refs1, value = TRUE, perl=TRUE)
refs1.split(";")[0]
strsplit(refs1, ";")
strsplit("UK, USA, Germany", ",(?=[^,]+$)", perl=TRUE)
strsplit(refs1, ".,(?=[^,]+$)", perl=TRUE)
firstRef<- strsplit(refs1, ";")[1] ## this one works! need to do that in a loop and attach the ID to each
View(firstRef)
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef <- refList[1]
refList<- strsplit(refs1, ";")[1] ## this one works! need to do that in a loop and attach the ID to each
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef <- refList[1]
View(firstRef)
firstRef
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef <- refList[[1]]
firstRef
refList<- strsplit(refs1, ";") ## this one works! need to do that in a loop and attach the ID to each
# also need to get the titles out??
#strsplit(refs1, ".,")
firstRef <- refList[[1]]
firstRef
# also need to get the titles out??
#strsplit(refs1, ".,")
refList[1]
# also need to get the titles out??
#strsplit(refs1, ".,")
refList[[1]]
firstRef <- refList[[[1]]]
firstRef
ref <- '[52] " Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 113, pp. 297-309"'
strsplit(ref, ".,(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, ".,(?=[^,]+$)", perl=TRUE)
strsplit(split1, ".,(?=[^,]+$)", perl=TRUE)
split1
strsplit(split1, ".,(?=[^,]+$)", perl=TRUE)
class(split1)
newSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 11"
strsplit(newSplit, ".,(?=[^,]+$)", perl=TRUE)
thirdSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
strsplit(thirdSplit, ".,(?=[^,]+$)", perl=TRUE)
strsplit(thirdSplit, "(.,)(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(.,)(?=[^,]+$)", perl=TRUE)
split1
ref <- '[52] " Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 113, pp. 297-309"'
split1 <- strsplit(ref, "(.,)(?=[^,]+$)", perl=TRUE)
split1
ref <- '[52] " Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 113, pp. 297-309"'
split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(/.,)(?=[^,]+$)", perl=TRUE)
split1
split1 <- strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
split1
split1 <- strsplit(ref, "('.,')(?=[^,]+$)", perl=TRUE)
split1
split1 <- strsplit(ref, "(\'.,\')(?=[^,]+$)", perl=TRUE)
split1
split1 <- strsplit(ref, "('\.,')(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
split1
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(newSplit, "(.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
split1
strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(/\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "([:punct:],)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref, "\\.,(?=[^,]+$)", perl=TRUE)
strsplit(ref,"(\\.,)(?!.*\1)", perl=TRUE)
# split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
# split1
# class(split1)
# newSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 11"
# strsplit(newSplit, "(.,)(?=[^,]+$)", perl=TRUE)
# thirdSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
# strsplit(thirdSplit, "(.,)(?=[^,]+$)", perl=TRUE)
# ok might have to split at every occurence of ;
# put all of those into their own cols? IDK this is looking less and less possible
# next match the (DATENUMERIC) and pull everything before that ?
newstr <- " Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
strsplit(newstr, "(\\([0-9]*\\))(?!.*\1)", perl=TRUE)
######## Imports #####################
library(bibliometrix)
library(igraph)
library(RColorBrewer)
#######################################
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
######## Imports #####################
library(bibliometrix)
library(igraph)
library(RColorBrewer)
#######################################
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
######## Imports #####################
library(bibliometrix)
library(igraph)
library(RColorBrewer)
#######################################
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
#######################################
>>>>>>> ac45d7fe128e9e171d8de9da052682f749aa43d3
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
head(fullData$references, 4)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
<<<<<<< HEAD
refs <- fullData[c("ID", "references", "title")]
IDLinkedRefDf <- read.csv("../Data/expandedRefsWithOriginPaperID.csv")
IDLinkedRefDf$ref_title <- NA
refSplitter <- function(df) {
df <- df[!(is.na(df$Reference) | df$Reference==""), ]
for (i in 1:nrow(df)) {
splitRefList <- strsplit(df$Reference[i],"(\\.,)(?!.*\1)", perl=TRUE)
#print(splitRefList)
for (sublistIter in 1:length(splitRefList[[1]])) {
#print(sublistIter)
#print(length(splitRefList[[1]]))
if (length(splitRefList[[1]]) > 0) {
if (grepl("(\\([0-9]*\\))(?!.*\1)" ,splitRefList[[1]][sublistIter], perl=TRUE) == T) {
# print(splitRefList[[1]][sublistIter]) # it works, I am lord of all regex
titlePlusDate <- splitRefList[[1]][sublistIter]
# justTitle <- strsplit(titlePlusDate, "(\\([0-9]*\\))(?!.*\1)", perl=TRUE)
# print(justTitle) # not sure if this will really cut it, too variable.
# additionally, might get away with the added extra bits in a check_recall?
df$ref_title[i] <- titlePlusDate
#print(titlePlusDate)
}
}
if (length(splitRefList[[1]]) == 0) {
#print(splitRefList[i])
print(df$Reference[i])
}
}
}
return(df)
}
IDLinkedRefDf <- refSplitter(IDLinkedRefDf)
write.csv(IDLinkedRefDf, "../Data/SplitRefs.csv")
matchedTable <- litsearchr::check_recall(fullData$title, IDLinkedRefDf$ref_title)
matchedTableDf <- as.data.frame(matchedTable)
write.csv(matchedTableDf, "../Data/matchedTableDf.csv")
View(matchTitles)
=======
refs <- fullData[c("ID", "references")]
refs1 <- refs$references[27]
grep("(?<![^;]).(?![^;])",refs1, value = FALSE, perl=TRUE)
someRef <- grep("^(.+?);", refs1, value = TRUE, perl=TRUE)
someRef
grep("^(.+?);", refs1, value = TRUE, perl=TRUE)
refList<- strsplit(refs1, ";") ## this one works! need to do that in a loop and attach the ID to each
# also need to get the titles out??
#strsplit(refs1, ".,")
refList[[1]]
firstRef <- refList[[1]]
firstRef
strsplit("UK, USA, Germany", ",(?=[^,]+$)", perl=TRUE)
ref <- '[52] " Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 113, pp. 297-309"'
strsplit(ref, "(\\.,)(?=[^,]+$)", perl=TRUE)
strsplit(ref,"(\\.,)(?!.*\1)", perl=TRUE) # ok this splits it up quite well?
# split1 <- strsplit(ref, "(\.,)(?=[^,]+$)", perl=TRUE)
# split1
# class(split1)
# newSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc., 11"
# strsplit(newSplit, "(.,)(?=[^,]+$)", perl=TRUE)
# thirdSplit <- "[52] \" Zub, K., Borowski, Z., SzafraÅ„ska, P.A., Wieczorek, M., Konarzewski, M., Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
# strsplit(thirdSplit, "(.,)(?=[^,]+$)", perl=TRUE)
# ok might have to split at every occurence of ;
# put all of those into their own cols? IDK this is looking less and less possible
# next match the (DATENUMERIC) and pull everything before that ?
newstr <- " Lower body mass and higher metabolic rate enhance winter survival in root voles, Microtus oeconomus (2014) Biol. J. Linn. Soc"
strsplit(newstr, "(\\([0-9]*\\))(?!.*\1)", perl=TRUE) # ok great, can get the titles and with some manual work the everything else
# monday task to automate grabbing the titles and having them associated with original article ID
# monday task to automate grabbing the titles and having them associated with original article ID
# I guess also give them their own unique ID? Like maybe paperID_OwnID
## refLists.R
set.seed(1)
#setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
setwd("E:/GitRepos/CT-MLNetworks/citationNetworks/Code")
setwd("E:/GitRepos/CT-MLNetworks/citationNetworks/Code")
install.packages("synthesisr")
install.packages("synthesisr")
r --version
--version
-version
version
############## Actual work from here on ##############
set.seed(1)
IDLinkedRefDf <-  read.csv("../Data/SplitRefs.csv")
unique(IDLinkedRefDf$ref_title)
numTitles <- length(unique(IDLinkedRefDf$ref_title))
numTitles
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 1
CTData$search <- 0
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
head(fullData$references, 4)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
titleData <- fullData[,c("ID", "title")]
View(titleData)
matchedTable <- litsearchr::check_recall(titleData$title, unique(IDLinkedRefDf$ref_title))
install.packages('litsearchr')
install.packages("remotes")
library(remotes)
install_github("elizagrames/litsearchr", ref="main")
install_github("elizagrames/litsearchr", ref="main")
library(litsearchr)
matchedTable <- litsearchr::check_recall(titleData$title, unique(IDLinkedRefDf$ref_title))
matchedTableDf <- as.data.frame(matchedTable)
write.csv(matchedTableDf, "../Data/matchedTableDf.csv")
>>>>>>> ac45d7fe128e9e171d8de9da052682f749aa43d3
