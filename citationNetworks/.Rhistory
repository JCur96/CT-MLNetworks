# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- "ML"
CTData$search <- "CT"
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
#fullData$search <- as.numeric(fullData$search)
colnames(edges)
edges <- edges[c("CitingID", "CitedID")]
colnames(edges)
# propsDf <- edgeDf
searchDf <- fullData[c("ID", "search",  "year")]
names(searchDf)[names(searchDf) == "ID"] <- "citedID"
names(searchDf)[names(searchDf) == "year"] <- "citedYear"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
edges <- merge(edges, searchDf, all = T, by = 'citedID')
head(edges)
citingDf <- fullData[c("ID", "search",  "year")]
names(citingDf)[names(citingDf) == "ID"] <- "citingID"
names(citingDf)[names(citingDf) == "year"] <- "citingYear"
names(citingDf)[names(citingDf) == "search"] <- "citingSearch"
edges <- merge(edges, citingDf, all = T, by = 'citingID')
head(edges)
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
edges <- read.csv("../Data/edges/edgeList.csv")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- "ML"
CTData$search <- "CT"
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
#fullData$search <- as.numeric(fullData$search)
colnames(edges)
edges <- edges[c("citingID", "citedID")]
colnames(edges)
# propsDf <- edgeDf
searchDf <- fullData[c("ID", "search",  "year")]
names(searchDf)[names(searchDf) == "ID"] <- "citedID"
names(searchDf)[names(searchDf) == "year"] <- "citedYear"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
edges <- merge(edges, searchDf, all = T, by = 'citedID')
head(edges)
citingDf <- fullData[c("ID", "search",  "year")]
names(citingDf)[names(citingDf) == "ID"] <- "citingID"
names(citingDf)[names(citingDf) == "year"] <- "citingYear"
names(citingDf)[names(citingDf) == "search"] <- "citingSearch"
edges <- merge(edges, citingDf, all = T, by = 'citingID')
head(edges)
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
edges <- read.csv("../Data/edges/edgeList.csv")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- "ML"
CTData$search <- "CT"
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
#fullData$search <- as.numeric(fullData$search)
colnames(edges)
edges <- edges[c("CitingID", "CitedID")]
names(searchDf)[names(searchDf) == "CitingID"] <- "citingID"
names(searchDf)[names(searchDf) == "CitedID"] <- "citedID"
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
edges <- read.csv("../Data/edges/edgeList.csv")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- "ML"
CTData$search <- "CT"
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
#fullData$search <- as.numeric(fullData$search)
colnames(edges)
edges <- edges[c("CitingID", "CitedID")]
names(edges)[names(edges) == "CitingID"] <- "citingID"
names(edges)[names(edges) == "CitedID"] <- "citedID"
colnames(edges)
# propsDf <- edgeDf
searchDf <- fullData[c("ID", "search",  "year")]
names(searchDf)[names(searchDf) == "ID"] <- "citedID"
names(searchDf)[names(searchDf) == "year"] <- "citedYear"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
edges <- merge(edges, searchDf, all = T, by = 'citedID')
head(edges)
citingDf <- fullData[c("ID", "search",  "year")]
names(citingDf)[names(citingDf) == "ID"] <- "citingID"
names(citingDf)[names(citingDf) == "year"] <- "citingYear"
names(citingDf)[names(citingDf) == "search"] <- "citingSearch"
edges <- merge(edges, citingDf, all = T, by = 'citingID')
head(edges)
write.csv("../Data/proportionsData.csv")
edgesMinusYear <- edges[c("citingID", "citedID", "citedSearch", "citingSearch")]
write.csv(edgesMinusYear, "../Data/proportionsDataMinusYear.csv")
write.csv(edges, "../Data/proportionsData.csv")
edges <- edges[, c(1, 5, 6, 2, 3, 4)]
head(edges)
edges <- edges[, c(1, 5, 6, 2, 3, 4)]
head(edges)
write.csv(edges, "../Data/proportionsData.csv")
edgesMinusYear <- edges[c("citingID", "citingSearch", "citedID", "citedSearch")]
head(edgesMinusYear)
write.csv(edgesMinusYear, "../Data/proportionsDataMinusYear.csv")
write.csv(edges, "../Data/proportionsData.csv")
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
edges <- read.csv("../Data/edges/edgeList.csv")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- "ML"
CTData$search <- "CT"
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
#fullData$search <- as.numeric(fullData$search)
colnames(edges)
edges <- edges[c("CitingID", "CitedID")]
names(edges)[names(edges) == "CitingID"] <- "citingID"
names(edges)[names(edges) == "CitedID"] <- "citedID"
colnames(edges)
# propsDf <- edgeDf
searchDf <- fullData[c("ID", "search",  "year")]
names(searchDf)[names(searchDf) == "ID"] <- "citedID"
names(searchDf)[names(searchDf) == "year"] <- "citedYear"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
edges <- merge(edges, searchDf, all = T, by = 'citedID')
head(edges)
citingDf <- fullData[c("ID", "search",  "year")]
names(citingDf)[names(citingDf) == "ID"] <- "citingID"
names(citingDf)[names(citingDf) == "year"] <- "citingYear"
names(citingDf)[names(citingDf) == "search"] <- "citingSearch"
edges <- merge(edges, citingDf, all = T, by = 'citingID')
head(edges)
edges <- edges[, c(1, 5, 6, 2, 3, 4)]
head(edges)
write.csv(edges, "../Data/proportionsData.csv")
edgesMinusYear <- edges[c("citingID", "citingSearch", "citedID", "citedSearch")]
head(edgesMinusYear)
write.csv(edgesMinusYear, "../Data/proportionsDataMinusYear.csv")
# CitingID citingSearch CitingYear CitedID citedSearch citedYear
# CitingID citingSearch CitingYear CitedID citedSearch citedYear
# CitingID citingSearch CitingYear CitedID citedSearch citedYear
# CitingID citingSearch CitingYear CitedID citedSearch citedYear
# CitingID citingSearch CitingYear CitedID citedSearch citedYear
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
edges <- read.csv("../Data/edges/edgeList.csv")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- "ML"
CTData$search <- "CT"
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
#fullData$search <- as.numeric(fullData$search)
colnames(edges)
edges <- edges[c("CitingID", "CitedID")]
names(edges)[names(edges) == "CitingID"] <- "citingID"
names(edges)[names(edges) == "CitedID"] <- "citedID"
colnames(edges)
# propsDf <- edgeDf
searchDf <- fullData[c("ID", "search",  "year")]
names(searchDf)[names(searchDf) == "ID"] <- "citedID"
names(searchDf)[names(searchDf) == "year"] <- "citedYear"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
edges <- merge(edges, searchDf, all = T, by = 'citedID')
head(edges)
citingDf <- fullData[c("ID", "search",  "year")]
names(citingDf)[names(citingDf) == "ID"] <- "citingID"
names(citingDf)[names(citingDf) == "year"] <- "citingYear"
names(citingDf)[names(citingDf) == "search"] <- "citingSearch"
edges <- merge(edges, citingDf, all = T, by = 'citingID')
head(edges)
edges <- edges[, c(1, 5, 6, 2, 3, 4)]
head(edges)
write.csv(edges, "../Data/proportionsData.csv")
edgesMinusYear <- edges[c("citingID", "citingSearch", "citedID", "citedSearch")]
head(edgesMinusYear)
write.csv(edgesMinusYear, "../Data/proportionsDataMinusYear.csv")
# CitingID citingSearch CitingYear CitedID citedSearch citedYear
# CitingID citingSearch CitingYear CitedID citedSearch citedYear
# CitingID citingSearch CitingYear CitedID citedSearch citedYear
igraph_rewire
?igraph_rewire
??igraph_rewire
?rewire
g <- make_ring(10)
g %>%
rewire(keeping_degseq(niter = 20)) %>%
degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
g <- make_ring(10)
g %>%
rewire(keeping_degseq(niter = 20)) %>%
degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g <- make_ring(10)
g %>%
rewire(keeping_degseq(niter = 20)) %>%
degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g %>%
rewire(keeping_degseq(niter = 20)) %>%
degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g %>%
rewire(keeping_degseq(niter = 20)) %>%
degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g %>%
rewire(keeping_degseq(niter = 20)) %>%
degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g %>%
rewire(keeping_degseq(niter = 20)) %>%
degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g %>%
rewire(keeping_degseq(niter = 20)) %>%
degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g <- make_ring(10)
g %>%
rewire(keeping_degseq(niter = 20)) #%>%
#degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g %>%
rewire(keeping_degseq(niter = 20)) #%>%
#degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
#degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g %>%
rewire(keeping_degseq(niter = 20)) #%>%
#degree()
plot(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
g <- make_ring(10)
g %>%
rewire(keeping_degseq(niter = 20)) #%>%
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
#degree()
print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
plot(g)
# networkAnalysis.R
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
# read in edgeList data
edges <- read.csv("../Data/edges/edgeList.csv")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 2
CTData$search <- 1
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
fullData$search <- as.numeric(fullData$search)
colnames(edges)
edges <- edges[c("CitingID", "CitedID")]
colnames(edges)
nodes <- fullData[c("ID")] # slice of just ID and title
# currently this is an undirected shared reference network I think
# or at least it should be as those are the edges
#edges <- fullData[c("ID", "cited_by")]
titles <- fullData[c("ID", "title")]
authors <- fullData[c("ID", "author")]
journal <- fullData[c("ID", "source_title")]
year <- fullData[c("ID", "year")]
search <- fullData[c("ID", "search")]
label <- fullData[c("ID", "label")]
color <- fullData[c("ID", "color")]
references <- fullData[c("ID", "references")]
class(edges)
edges <- as.matrix(edges)
class(edges)
edges
net <- igraph::graph_from_edgelist(edges, directed = TRUE)
net <- set_vertex_attr(net, "title", value = nodes)
net <- set_vertex_attr(net, "author", value = authors)
net <- set_vertex_attr(net, "journal", value = journal)
net <- set_vertex_attr(net, "year", value = year)
net <- set_vertex_attr(net, "search", value = search)
modularityList <- c()
for (i in 1:10) { # 10000
# graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE) # where is degree in there?
# needs to maintain both in- and out-degree
# igraph_rewire() ???
# degree.distribution()
# graph should be directed!!!
graph <- rewire(net, with = keeping_degseq(niter = vcount(net) * 10))
graphCluster <- cluster_louvain(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
modularityList <- append(modularityList, graphModularity)
}
modularityList
hist(modularityList)
modularityList <- c()
for (i in 1:10) { # 10000
# graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE) # where is degree in there?
# needs to maintain both in- and out-degree
# igraph_rewire() ???
# degree.distribution()
# graph should be directed!!!
graph <- rewire(net, with = keeping_degseq(niter = vcount(net) * 10))
# graphCluster <- cluster_louvain(graph)
graphCluster <- edge.betweenness(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
modularityList <- append(modularityList, graphModularity)
}
modularityList
hist(modularityList)
?edge.betweenness.community
modularityList <- c()
for (i in 1:10) { # 10000
# graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE) # where is degree in there?
# needs to maintain both in- and out-degree
# igraph_rewire() ???
# degree.distribution()
# graph should be directed!!!
graph <- rewire(net, with = keeping_degseq(niter = vcount(net) * 10))
# graphCluster <- cluster_louvain(graph)
# graphCluster <- edge.betweenness(graph)
graphCluster <- edge.betweenness.community(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
modularityList <- append(modularityList, graphModularity)
}
#         6372,
#         37584,
#         directed = FALSE,
#         loops = FALSE
# )
#
# graphCluster <- cluster_louvain(graph)
# graphMembers <- igraph::membership(graphCluster)
# modularity(graph, graphMembers)
# graph
graph <- rewire(net, with = keeping_degseq(niter = vcount(net) * 10))
graph
graphCluster <- edge.betweenness.community(graph)
#         6372,
#         37584,
#         directed = FALSE,
#         loops = FALSE
# )
#
# graphCluster <- cluster_louvain(graph)
# graphMembers <- igraph::membership(graphCluster)
# modularity(graph, graphMembers)
# graph
graph <- rewire(net, with = keeping_degseq(niter = vcount(net) * 10))
graph
graphCluster <- cluster_louvain(graph)
graphCluster <- edge.betweenness.community(graph, weights = NULL)
write_graph(
graph,
"../Data/GraphObj.txt",
format = c("edgelist"))
write_graph(
graph,
"../Data/GraphObj.txt",
format = c("edgelist"))
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 2
CTData$search <- 1
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
write.csv(fullData, "../Data/dataForPythonModules.csv")
# networkAnalysis.R
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
# read in edgeList data
edges <- read.csv("../Data/edges/edgeList.csv")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
# MLData$search <- 2
# CTData$search <- 1
MLData$search <- 'ML'
CTData$search <- 'CT'
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
write.csv(fullData, "../Data/dataForPythonModules.csv")
