dplyr::group_by(CitingID) %>%
dplyr::summarise(CitedID = list(CitedID))
prop2022 <- nrow(year2022List) / length(CtIDList2022)
row2022 <- nrow(year2022List)
rows <- list(row2012, row2013, row2014, row2015, row2016, row2017, row2018, row2019, row2020, row2021, row2022)
props <- list(prop2012, prop2013, prop2014, prop2015, prop2016, prop2017, prop2018, prop2019, prop2020, prop2021, prop2022)
Reduce("+", props)
Reduce("+", rows)
# gephi plot
giantConnectedData <- dataPlusEdges[!is.na(dataPlusEdges$CitedID),]
giantConnectedData <- apply(giantConnectedData,2,as.character)
write.csv(giantConnectedData, "../Data/GiantConnected.csv")
# read the above + plus the edgelist in to get only connected nodes
yearDf <- propsDf[c("year")]
## now do actualy proportions
propsDf <- edgeDf
searchDf <- fullData[c("CitingID", "search",  "year")]
searchDf
names(searchDf)[names(searchDf) == "CitingID"] <- "CitedID"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
propsDf <- merge(propsDf, searchDf, all = T, by = 'CitedID')
propsDf <- propsDf[order(propsDf$CitingID),]
propsDf <- tidyr::drop_na(propsDf)
yearDf <- propsDf[c("year")]
View(yearDf)
yearDf <- propsDf[c("year", "citedSearch")]
View(yearDf)
source("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code/networkAnalysis.R", echo=TRUE)
# networkAnalysis.R
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
# read in edgeList data
edges <- read.csv("../Data/edges/edgeList.csv")
# read data in
MLData <- read.csv("../Data/ML/autoScreenedML.csv")
CTData <- read.csv("../Data/CT/autoScreenedCT.csv")
MLData$search <- 2
CTData$search <- 1
MLData$label <- "ML"
CTData$label <- "CT"
MLData$color <- "gold"
CTData$color <- "blue"
fullData <- merge(MLData, CTData, all = T)
names(fullData)[names(fullData) == "X"] <- "ID"
colnames(fullData)
fullData$ID <- 1:nrow(fullData)
fullData$search <- as.numeric(fullData$search)
colnames(edges)
edges <- edges[c("CitingID", "CitedID")]
colnames(edges)
nodes <- fullData[c("ID")] # slice of just ID and title
# currently this is an undirected shared reference network I think
# or at least it should be as those are the edges
#edges <- fullData[c("ID", "cited_by")]
titles <- fullData[c("ID", "title")]
authors <- fullData[c("ID", "author")]
journal <- fullData[c("ID", "source_title")]
year <- fullData[c("ID", "year")]
search <- fullData[c("ID", "search")]
label <- fullData[c("ID", "label")]
color <- fullData[c("ID", "color")]
references <- fullData[c("ID", "references")]
class(edges)
edges <- as.matrix(edges)
class(edges)
edges
net <- igraph::graph_from_edgelist(edges, directed = FALSE)
net <- set_vertex_attr(net, "title", value = nodes)
net <- set_vertex_attr(net, "author", value = authors)
net <- set_vertex_attr(net, "journal", value = journal)
net <- set_vertex_attr(net, "year", value = year)
net <- set_vertex_attr(net, "search", value = search)
layout <- layout.fruchterman.reingold(net)
cluster
cluster <- cluster_louvain(net)
cluster
# modularity(cluster)
# modularity(net, membership(cluster))
members <- igraph::membership(cluster)
members
modularity(net, members)
class(members)
membersDf <- as.data.frame(members)
write.csv(as.numeric(members), "../Data/membership.csv")
# bind the dfs
communities <- read.csv("../Data/membership.csv")
communities
names(communities)[names(communities) == "X"] <- "ID"
names(communities)[names(communities) == "x"] <- "Community"
fullData <- merge(fullData, communities, all = T, by = 'ID')
# now can see what search each module contains
# ok maybe drop irrelevant stuff
partData <- fullData[c("ID", "search", "Community")]
groupedData <- partData %>% dplyr::group_split(Community)
groupedData[[7]]
# great, now code for proportion of each comm of each search?
tab <- groupedData[[7]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
counts
# count return col2 value 1 the col 2 value 2 over nrow for proportion
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
CTProp + MLProp
CTProportionList <- c()
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
# CTProp + MLProp
CTProportionList <- append(CTProportionList, CTProp)
}
CTPropDf <- as.data.frame(unlist(CTProportionList))
names(CTPropDf)[names(CTPropDf) == "unlist(CTProportionList)"] <- "proportionCT"
CTPropDf$Community <- 1:nrow(CTPropDf)
CTPropDf
partData <- merge(partData, CTPropDf, all=T, by='Community')
MLProportionList <- c()
for (i in 1:length(groupedData)) {
tab <- groupedData[[i]]
counts <- dplyr::count(tab, search)
totRows <- nrow(tab)
CTProp <- counts[1,2] / totRows
MLProp <- counts[2,2] / totRows
if (is.na(MLProp)) {
MLProp <- 0
}
# CTProp + MLProp
MLProportionList <- append(MLProportionList, MLProp)
}
MLProportionList
#         value <- MLProportionList[[i]][[1]]
#         row <- c(comm, value)
#         MLPropDf <- append(MLPropDf, row)
# }
# MLPropDf <- as.data.frame(MLPropDf)
# MLProportionList <- as.data.frame(MLProportionList)
# MLProportionList <- MLProportionList %>% gather(year, value, -c(Code, Country))
# MLProportionList
# partData <- merge(partData, MLProportionList, by='Community')
# MLPropDf <- as.data.frame(MLPropDf) # ?????????
MLPropDf <- as.data.frame(unlist(MLProportionList))
MLPropDf
colnames(MLPropDf)
names(MLPropDf)[names(MLPropDf) == "unlist(MLProportionList)"] <- "proportionML"
MLPropDf$Community <- 1:nrow(MLPropDf)
MLPropDf$Community
partData <- merge(partData, MLPropDf, all=T, by='Community')
write.csv(partData, "../Data/community.csv")
# proportion of CT citing ML papers
# how are we going to get proportion of ML refs cited out?
names(fullData)[names(fullData) == "ID"] <- "CitingID"
# need to make a list of each cited ID by citingID
edgeDf <- as.data.frame(edges)
edgeDf <- edgeDf[order(edgeDf$CitingID),]
citationListsByNode <- edgeDf %>%
dplyr::group_by(CitingID) %>%
dplyr::summarise(CitedID = list(CitedID)) # where cited ID is an ML Citing ID?
class(citationListsByNode)
head(citationListsByNode)
## now do actualy proportions
propsDf <- edgeDf
searchDf <- fullData[c("CitingID", "search",  "year")]
searchDf
names(searchDf)[names(searchDf) == "CitingID"] <- "CitedID"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
propsDf <- merge(propsDf, searchDf, all = T, by = 'CitedID')
propsDf <- propsDf[order(propsDf$CitingID),]
propsDf <- tidyr::drop_na(propsDf)
yearDf <- propsDf[c("year", "citedSearch")]
propsDf <- propsDf[!(is.na(propsDf$year) | propsDf$year==" "), ]
propsDf
propsDf <- propsDf[order(propsDf$year),]
propsDf
colnames(propsDf)
propsDf <- propsDf %>% dplyr::filter(citedSearch == 2)
head(propsDf) # this is all the papers which cite ML papers
# now need to filter to those only in the CT seach
tmpCTData <- fullData %>% dplyr::filter(search == 1)
CtIDList <- tmpCTData$CitingID
# length(CtIDList)
head(CtIDList)
propsDf <- propsDf %>% dplyr::filter(CitingID %in% CtIDList)
head(propsDf)
propsList <- propsDf %>%
dplyr::group_by(CitingID) %>%
dplyr::summarise(CitedID = list(CitedID))
# compare length of list of CT IDs to the nrow of this new DF to get proportion
# propsList <- tidyr::drop_na(propsList)
nrow(propsList)
length(CtIDList)
propCTPapersCitingML <- nrow(propsList) / length(CtIDList)
propCTPapersCitingML
##
dataPlusEdges <- merge(fullData, citationListsByNode, all = T, by = 'CitingID')
MLFull <- dataPlusEdges %>% dplyr::filter(dataPlusEdges$label == 'ML')
CTFull <- dataPlusEdges %>% dplyr::filter(dataPlusEdges$label == 'CT')
colnames(dataPlusEdges)
giantConnectedData <- dataPlusEdges[!is.na(dataPlusEdges$CitedID),]
dataPlusEdges <- apply(dataPlusEdges,2,as.character)
write.csv(dataPlusEdges, "../Data/FullData.csv")
# plot proportion CT citing ML against year
propsDf <- edgeDf
searchDf <- fullData[c("CitingID", "search", "year")]
names(searchDf)[names(searchDf) == "CitingID"] <- "CitedID"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
propsDf <- merge(propsDf, searchDf, all = T, by = 'CitedID')
# propsDf$CitingID
propsDf <- propsDf[order(propsDf$CitingID),]
propsDf <- tidyr::drop_na(propsDf)
propsDf <- propsDf %>% dplyr::filter(citedSearch == 2)
yearData <- searchDf %>% dplyr::group_split(year)
#length(yearData)
tmpCTData <- searchDf %>% dplyr::filter(citedSearch == 1) # search 1 is CT
# CtIDList <- tmpCTData$CitingID
# yearData[[1]][["year"]][[1]]
propVector <- c()
outerList <- c()
nRows <- c()
lengths <- c()
for (i in 1:length(yearData)) {
#print(yearData[[i]]['year'])
# tmpsearchDf <- yearData[[i]]
tmpPropsDf <- propsDf
# print(head(tmpPropsDf$CitingID))
# tmpPropsDf <- merge(propsDf, tmpsearchDf, all = T, by = 'CitedID')
# tmpPropsDf <- tmpPropsDf[order(tmpPropsDf$CitingID),]
# tmpPropsDf <- tidyr::drop_na(tmpPropsDf)
# tmpPropsDf <- tmpPropsDf %>% dplyr::filter(citedSearch == 2)
currentYear <- yearData[[i]][["year"]][[1]]
yearPropsDf <- tmpPropsDf %>% dplyr::filter(year == currentYear)
#print(head(yearPropsDf$year))
# print(class(yearPropsDf))
yearCTList <- tmpCTData %>% dplyr::filter(year == currentYear)
#print(head(tmpCTData$CitedID))
#print(yearCTList)
#print(yearCTList$CitingID)
CtIDList <- yearCTList$CitedID # might need to go back to CitingID
# print(head(tmpPropsDf))
yearPropsDf <- yearPropsDf %>% dplyr::filter(CitingID %in% CtIDList)
# print(class(yearPropsDf))
#print(head(tmpPropsDf))
tmpPropsList <- yearPropsDf %>%
dplyr::group_by(CitingID) %>%
dplyr::summarise(CitedID = list(CitedID))
row <- nrow(tmpPropsList)
#print(tmpPropsList)
nRows <- append(nRows, nrow(tmpPropsList))
lengths <- append(lengths, length(CtIDList))
# print(length(CtIDList))
proportion <- nrow(tmpPropsList) / length(CtIDList)
#print(proportion*100)
innerList <- list(currentYear, proportion)
outerList <- append(outerList, list(innerList))
propVector <- append(propVector, proportion)
}
sum(nRows) # should be 2209
sum(lengths) # should be 4640
## it isnt working and right now I can't work out why, will try again tomorrow
# OK i think I'm jsut too stupid to do it this way, gonna do it the idiots ways
year2012 <- yearData[[1]]
year2013 <- yearData[[2]]
year2014 <- yearData[[3]]
year2015 <- yearData[[4]]
year2016 <- yearData[[5]]
year2017 <- yearData[[6]]
year2018 <- yearData[[7]]
year2019 <- yearData[[8]]
year2020 <- yearData[[9]]
year2021 <- yearData[[10]]
year2022 <- yearData[[11]]
propsDf <- edgeDf
searchDf <- fullData[c("CitingID", "search",  "year")]
searchDf
names(searchDf)[names(searchDf) == "CitingID"] <- "CitedID"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
propsDf <- merge(propsDf, searchDf, all = T, by = 'CitedID')
propsDf <- propsDf[order(propsDf$CitingID),]
propsDf <- tidyr::drop_na(propsDf)
propsDf <- propsDf[!(is.na(propsDf$year) | propsDf$year==" "), ]
propsDf
propsDf <- propsDf[order(propsDf$year),]
propsDf
colnames(propsDf)
propsDf <- propsDf %>% dplyr::filter(citedSearch == 2)
head(propsDf) # this is all the papers which cite ML papers
# now need to filter to those only in the CT seach
yearDataList <- propsDf %>% dplyr::group_split(year)
year2012 <- yearDataList[[1]]
year2013 <- yearDataList[[2]]
year2014 <- yearDataList[[3]]
year2015 <- yearDataList[[4]]
year2016 <- yearDataList[[5]]
year2017 <- yearDataList[[6]]
year2018 <- yearDataList[[7]]
year2019 <- yearDataList[[8]]
year2020 <- yearDataList[[9]]
year2021 <- yearDataList[[10]]
year2022 <- yearDataList[[11]]
tmpCTData <- fullData %>% dplyr::filter(search == 1)
tmpCTData <- tmpCTData[c("CitingID", "year")]
yearCTData <- tmpCTData %>% dplyr::group_split(year)
ctYear2012 <- yearCTData[[1]]
ctYear2013 <- yearCTData[[2]]
ctYear2014 <- yearCTData[[3]]
ctYear2015 <- yearCTData[[4]]
ctYear2016 <- yearCTData[[5]]
ctYear2017 <- yearCTData[[6]]
ctYear2018 <- yearCTData[[7]]
ctYear2019 <- yearCTData[[8]]
ctYear2020 <- yearCTData[[9]]
ctYear2021 <- yearCTData[[10]]
ctYear2022 <- yearCTData[[11]]
CtIDList2012 <- ctYear2012$CitingID
CtIDList2013 <- ctYear2013$CitingID
CtIDList2014 <- ctYear2014$CitingID
CtIDList2015 <- ctYear2015$CitingID
CtIDList2016 <- ctYear2016$CitingID
CtIDList2017 <- ctYear2017$CitingID
CtIDList2018 <- ctYear2018$CitingID
CtIDList2019 <- ctYear2019$CitingID
CtIDList2020 <- ctYear2020$CitingID
CtIDList2021 <- ctYear2021$CitingID
CtIDList2022 <- ctYear2022$CitingID
length(CtIDList2022)
length(CtIDList2012)
length(CtIDList2013)
length(CtIDList2014)
length(CtIDList2015)
length(CtIDList2016)
length(CtIDList2017)
length(CtIDList2018)
length(CtIDList2019)
length(CtIDList2020)
length(CtIDList2021)
length(CtIDList2022)
length(CtIDList2012) +
length(CtIDList2013) +
length(CtIDList2014) +
length(CtIDList2015) +
length(CtIDList2016) +
length(CtIDList2017) +
length(CtIDList2018) +
length(CtIDList2019) +
length(CtIDList2020) +
length(CtIDList2021) +
length(CtIDList2022) # thats the 4640 one then
year2012 <- year2012 %>% dplyr::filter(CitingID %in% CtIDList2012)
head(year2012)
year2012List <- year2012 %>%
dplyr::group_by(CitingID) %>%
dplyr::summarise(CitedID = list(CitedID))
prop2012 <- nrow(year2012List) / length(CtIDList2012)
row2012 <- nrow(year2012List)
year2013 <- year2013 %>% dplyr::filter(CitingID %in% CtIDList2013)
year2013List <- year2013 %>%
dplyr::group_by(CitingID) %>%
dplyr::summarise(CitedID = list(CitedID))
length(CtIDList2012) +
length(CtIDList2013) +
length(CtIDList2014) +
length(CtIDList2015) +
length(CtIDList2016) +
length(CtIDList2017) +
length(CtIDList2018) +
length(CtIDList2019) +
length(CtIDList2020) +
length(CtIDList2021) +
length(CtIDList2022) # thats the 4640 one then
year2012 <- year2012 %>% dplyr::filter(CitingID %in% CtIDList2012)
head(year2012)
nrow(year2012)
year2012 <- fullData %>% dplyr::filter(year == 2012)
View(year2012)
year2012 <- year2012[c("CitingID", "search", "year")]
year2012 <- year2012 %>% dplyr::filter(search == 2)
View(year2012)
length(CtIDList2012)
View(year2012)
year2012 <- fullData %>% dplyr::filter(year == 2012)
year2012 <- year2012[c("CitingID", "search", "year")]
year2012 <- year2012 %>% dplyr::filter(search == 2)
year2012 <- fullData %>% dplyr::filter(year == 2012)
year2012 <- year2012[c("CitingID", "search", "year")]
year2012 <- year2012 %>% dplyr::filter(search == 1)
length(CtIDList2012)
# now need to filter to those only in the CT seach
yearDataList <- propsDf %>% dplyr::group_split(year)
year2012 <- yearDataList[[1]]
year2013 <- yearDataList[[2]]
year2014 <- yearDataList[[3]]
year2015 <- yearDataList[[4]]
year2016 <- yearDataList[[5]]
year2017 <- yearDataList[[6]]
year2018 <- yearDataList[[7]]
year2019 <- yearDataList[[8]]
year2020 <- yearDataList[[9]]
year2021 <- yearDataList[[10]]
year2022 <- yearDataList[[11]]
tmpCTData <- fullData %>% dplyr::filter(search == 1)
tmpCTData <- tmpCTData[c("CitingID", "year")]
yearCTData <- tmpCTData %>% dplyr::group_split(year)
ctYear2012 <- yearCTData[[1]]
ctYear2013 <- yearCTData[[2]]
ctYear2014 <- yearCTData[[3]]
ctYear2015 <- yearCTData[[4]]
ctYear2016 <- yearCTData[[5]]
ctYear2017 <- yearCTData[[6]]
ctYear2018 <- yearCTData[[7]]
ctYear2019 <- yearCTData[[8]]
ctYear2020 <- yearCTData[[9]]
ctYear2021 <- yearCTData[[10]]
ctYear2022 <- yearCTData[[11]]
CtIDList2012 <- ctYear2012$CitingID
CtIDList2013 <- ctYear2013$CitingID
CtIDList2014 <- ctYear2014$CitingID
CtIDList2015 <- ctYear2015$CitingID
CtIDList2016 <- ctYear2016$CitingID
CtIDList2017 <- ctYear2017$CitingID
CtIDList2018 <- ctYear2018$CitingID
CtIDList2019 <- ctYear2019$CitingID
CtIDList2020 <- ctYear2020$CitingID
CtIDList2021 <- ctYear2021$CitingID
CtIDList2022 <- ctYear2022$CitingID
length(CtIDList2012) +
length(CtIDList2013) +
length(CtIDList2014) +
length(CtIDList2015) +
length(CtIDList2016) +
length(CtIDList2017) +
length(CtIDList2018) +
length(CtIDList2019) +
length(CtIDList2020) +
length(CtIDList2021) +
length(CtIDList2022) # thats the 4640 one then
year2012 <- year2012 %>% dplyr::filter(CitingID %in% CtIDList2012)
head(year2012)
nrow(year2012)
year2012 <- yearDataList[[1]]
# year2012 <- fullData %>% dplyr::filter(year == 2012)
# year2012 <- year2012[c("CitingID", "search", "year")]
# year2012 <- year2012 %>% dplyr::filter(search == 1)
# length(CtIDList2012)
year2012
CtIDList2012
print(year2012$CitingID %in% CtIDList2012)
years <- list(2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022)
# I cannot see what is wrong with this so must assume this and the for loop have actually worked and somehow my logic
# (which is the same for the full data set?) is incorrect
plot(props, years)
# I cannot see what is wrong with this so must assume this and the for loop have actually worked and somehow my logic
# (which is the same for the full data set?) is incorrect
plot(years, props)
# I cannot see what is wrong with this so must assume this and the for loop have actually worked and somehow my logic
# (which is the same for the full data set?) is incorrect
p <- plot(years, props)
p + abline()
for (i in 1:100) { # 10000
graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE)
graphCluster <- cluster_louvain(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
modularityList <- append(modularityList, graphModularity)
}
# networkAnalysis.R
set.seed(1)
setwd("C:/docNonNetwork/RProjects/CT-MLNetworks/citationNetworks/Code")
# imports
library(igraph)
library(RColorBrewer)
modularityList <- c()
for (i in 1:100) { # 10000
graph <- sample_gnm(6372, 37584, directed = FALSE, loops = FALSE)
graphCluster <- cluster_louvain(graph)
graphMembers <- igraph::membership(graphCluster)
graphModularity <- modularity(graph, graphMembers)
modularityList <- append(modularityList, graphModularity)
}
modularityList
hist(modularityList)
?sample_gnm
## now do actualy proportions
head(edgeDf)
## now do actualy proportions
head(edgeDf)
searchDf <- fullData[c("CitingID", "search",  "year")]
head(searchDf)
names(searchDf)[names(searchDf) == "CitingID"] <- "CitedID"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
head(searchDf) # merge( by.x, by.y)
names(searchDf)[names(searchDf) == "CitingID"] <- "CitedID"
names(searchDf)[names(searchDf) == "search"] <- "citedSearch"
propsDf <- merge(propsDf, searchDf, all = T, by = 'CitedID')
propsDf <- propsDf[order(propsDf$CitingID),]
propsDf <- tidyr::drop_na(propsDf)
head(propsDf)
yearDf <- propsDf[c("year", "citedSearch")]
propsDf <- propsDf[!(is.na(propsDf$year) | propsDf$year==" "), ]
propsDf <- propsDf %>% dplyr::filter(citedSearch == 2)
propsDf <- propsDf %>% dplyr::filter(citedSearch == 2)
# now need to filter to those only in the CT seach
tmpCTData <- fullData %>% dplyr::filter(search == 1)
CtIDList <- tmpCTData$CitingID
# length(CtIDList)
head(CtIDList)
propsDf <- propsDf %>% dplyr::filter(CitingID %in% CtIDList)
head(propsDf)
